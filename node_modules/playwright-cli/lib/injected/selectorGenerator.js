"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildSelector = void 0;
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const xpathSelectorEngine_1 = require("./xpathSelectorEngine");
function buildSelector(injectedScript, targetElement) {
    const path = [];
    let numberOfMatchingElements = Number.MAX_SAFE_INTEGER;
    for (let element = targetElement; element && element !== document.documentElement; element = element.parentElement) {
        const selector = buildSelectorCandidate(injectedScript, element);
        if (!selector)
            continue;
        const fullSelector = joinSelector([selector, ...path]);
        const parsedSelector = injectedScript.parseSelector(fullSelector);
        const selectorTargets = injectedScript.querySelectorAll(parsedSelector, targetElement.ownerDocument);
        if (!selectorTargets.length)
            break;
        if (selectorTargets[0] === targetElement)
            return { selector: fullSelector, elements: selectorTargets };
        if (selectorTargets.length && numberOfMatchingElements > selectorTargets.length) {
            numberOfMatchingElements = selectorTargets.length;
            path.unshift(selector);
        }
    }
    const xpathSelector = xpathSelectorEngine_1.XPathEngine.create(document.documentElement, targetElement, 'default');
    const parsedSelector = injectedScript.parseSelector(xpathSelector);
    return {
        selector: xpathSelector,
        elements: injectedScript.querySelectorAll(parsedSelector, targetElement.ownerDocument)
    };
}
exports.buildSelector = buildSelector;
function buildSelectorCandidate(injectedScript, element) {
    const nodeName = element.nodeName.toLowerCase();
    for (const attribute of ['data-testid', 'data-test-id', 'data-test']) {
        if (element.hasAttribute(attribute))
            return { engine: 'css', selector: `${nodeName}[${attribute}=${quoteString(element.getAttribute(attribute))}]` };
    }
    for (const attribute of ['aria-label', 'role']) {
        if (element.hasAttribute(attribute))
            return { engine: 'css', selector: `${element.nodeName.toLocaleLowerCase()}[${attribute}=${quoteString(element.getAttribute(attribute))}]` };
    }
    if (['INPUT', 'TEXTAREA'].includes(element.nodeName)) {
        const nodeNameLowercase = element.nodeName.toLowerCase();
        if (element.getAttribute('name'))
            return { engine: 'css', selector: `${nodeNameLowercase}[name=${quoteString(element.getAttribute('name'))}]` };
        if (element.getAttribute('placeholder'))
            return { engine: 'css', selector: `${nodeNameLowercase}[placeholder=${quoteString(element.getAttribute('placeholder'))}]` };
        if (element.getAttribute('type'))
            return { engine: 'css', selector: `${nodeNameLowercase}[type=${quoteString(element.getAttribute('type'))}]` };
    }
    else if (element.nodeName === 'IMG') {
        if (element.getAttribute('alt'))
            return { engine: 'css', selector: `img[alt=${quoteString(element.getAttribute('alt'))}]` };
    }
    const textSelector = textSelectorForElement(element);
    if (textSelector)
        return { engine: 'text', selector: textSelector };
    // De-prioritize id, but still use it as a last resort.
    const idAttr = element.getAttribute('id');
    if (idAttr && !isGuidLike(idAttr))
        return { engine: 'css', selector: `${nodeName}[id=${quoteString(idAttr)}]` };
    return null;
}
function textSelectorForElement(node) {
    const maxLength = 30;
    let needsRegex = false;
    let trimmedText = null;
    for (const child of node.childNodes) {
        if (child.nodeType !== Node.TEXT_NODE)
            continue;
        if (child.textContent && child.textContent.trim()) {
            if (trimmedText)
                return null;
            trimmedText = child.textContent.trim().substr(0, maxLength);
            needsRegex = child.textContent !== trimmedText;
        }
        else {
            needsRegex = true;
        }
    }
    if (!trimmedText)
        return null;
    return needsRegex ? `/.*${escapeForRegex(trimmedText)}.*/` : `"${trimmedText}"`;
}
function escapeForRegex(text) {
    return text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
function quoteString(text) {
    return `"${text.replaceAll(/"/g, '\\"')}"`;
}
function joinSelector(path) {
    const tokens = [];
    let lastEngine = '';
    for (const { engine, selector } of path) {
        if (tokens.length && (lastEngine !== 'css' || engine !== 'css'))
            tokens.push('>>');
        lastEngine = engine;
        if (engine === 'css')
            tokens.push(selector);
        else
            tokens.push(`${engine}=${selector}`);
    }
    return tokens.join(' ');
}
function isGuidLike(id) {
    let lastCharacterType;
    let transitionCount = 0;
    for (let i = 0; i < id.length; ++i) {
        const c = id[i];
        let characterType;
        if (c === '-' || c === '_')
            continue;
        if (c >= 'a' && c <= 'z')
            characterType = 'lower';
        else if (c >= 'A' && c <= 'Z')
            characterType = 'upper';
        else if (c >= '0' && c <= '9')
            characterType = 'digit';
        else
            characterType = 'other';
        if (characterType === 'lower' && lastCharacterType === 'upper') {
            lastCharacterType = characterType;
            continue;
        }
        if (lastCharacterType && lastCharacterType !== characterType)
            ++transitionCount;
        lastCharacterType = characterType;
    }
    return transitionCount >= id.length / 4;
}
//# sourceMappingURL=selectorGenerator.js.map