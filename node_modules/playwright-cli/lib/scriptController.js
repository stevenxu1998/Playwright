"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScriptController = void 0;
const injectedScriptSource = require("./generated/scriptSource");
const recorderController_1 = require("./recorderController");
class ScriptController {
    constructor(browserName, launchOptions, contextOptions, context, output, enableRecorder, deviceName) {
        if (enableRecorder)
            this._recorder = new recorderController_1.RecorderController(browserName, launchOptions, contextOptions, context, output, deviceName);
        context.on('page', page => this._onPage(page));
        for (const page of context.pages())
            this._onPage(page);
    }
    async _onPage(page) {
        // Install in all frames.
        for (const frame of page.frames())
            this._ensureInstalledInFrame(frame);
        page.on('framenavigated', frame => this._ensureInstalledInFrame(frame));
    }
    async _ensureInstalledInFrame(frame) {
        try {
            const frameAsAny = frame;
            await frameAsAny._extendInjectedScript(injectedScriptSource.source, { enableRecorder: !!this._recorder });
        }
        catch (e) {
            const str = e.toString();
            // Cr
            if (str.includes('Execution context was destroyed'))
                return;
            // Wk
            if (str.includes('Target closed'))
                return;
            // Ff
            if (str.includes('The page has been closed'))
                return;
            console.log(e);
        }
    }
}
exports.ScriptController = ScriptController;
//# sourceMappingURL=scriptController.js.map